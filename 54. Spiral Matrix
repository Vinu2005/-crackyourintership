Given an m x n matrix, return all elements of the matrix in spiral order.

 

Example 1:


Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]
Example 2:


Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 10
-100 <= matrix[i][j] <= 100

class Solution:
    def spiralOrder(self, matrix: List[List[int]]) -> List[int]:
        strow,enrow,stcol,encol=0,len(matrix)-1,0,len(matrix[0])-1
        ans=[]
        while strow<=enrow and stcol<=encol:
            for i in range(stcol,encol+1):
                ans.append(matrix[strow][i])
            for i in range(strow+1,enrow+1):
                ans.append(matrix[i][encol])
            for i in range(encol-1,stcol-1,-1):
                if strow==enrow:
                    break
                ans.append(matrix[enrow][i])
            for i in range(enrow-1,strow,-1):
                if stcol==encol:
                    break
                ans.append(matrix[i][stcol])
            strow+=1
            enrow-=1
            stcol+=1
            encol-=1
        return ans
        
