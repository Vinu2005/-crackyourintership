Smallest window in a string containing all the characters of another string
Given two strings S and P. Find the smallest window in the string S consisting of all the characters(including duplicates) of the string P.  Return "-1" in case there is no such window present. In case there are multiple such windows of same length, return the one with the least starting index.
Note : All characters are in Lowercase alphabets. 

Example 1:

Input:
S = "timetopractice"
P = "toc"
Output: 
toprac
Explanation: "toprac" is the smallest
substring in which "toc" can be found.
Example 2:

Input:
S = "zoomlazapzo"
P = "oza"
Output: 
apzo
Explanation: "apzo" is the smallest 
substring in which "oza" can be found.
Your Task:
You don't need to read input or print anything. Your task is to complete the function smallestWindow() which takes two string S and P as input paramters and returns the smallest window in string S having all the characters of the string P. In case there are multiple such windows of same length, return the one with the least starting index. 

Expected Time Complexity: O(|S|)
Expected Auxiliary Space: O(n) n = len(p)

 

Constraints: 
1 ≤ |S|, |P| ≤ 105

class Solution:
    
    #Function to find the smallest window in the string s consisting
    #of all the characters of string p.
    def smallestWindow(self, s, p):
        countT, window = {},{}  # two hashmap to count each element s,p 
        
        for c in p:
            countT[c] = 1 + countT.get(c,0)  # get "toc" initialize in 1 of index

        have, need = 0,len(countT)
        res,reslen = [-1,-1], float("infinity")  
        l = 0      #slidig window start here
        for r in range(len(s)):    
            c = s[r]
            window[c] = 1 + window.get(c,0) # get "toc" initialize in 1 of index

            if c in countT and window[c] == countT[c]:
                have += 1

            while have == need:   #if both are equal update res and lenght
                #update res
                if (r - l + 1) < reslen:
                    res = [l,r]
                    reslen = (r - l + 1)   
                #pop from the left of our window
                window[s[l]] -= 1
                if s[l] in countT and window[s[l]] < countT[s[l]]:
                    have -= 1
                l += 1
        
        l,r = res
        return s[l:r+1] if reslen != float("infinity") else -1
        #code here
