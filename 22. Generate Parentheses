
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

 

Example 1:

Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]
Example 2:

Input: n = 1
Output: ["()"]
 

Constraints:

1 <= n <= 8

class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        def backtrack(s, left, right, result):
            if len(s) == 2 * n:
                result.append(s)
                return
            if left < n:
                backtrack(s + '(', left + 1, right, result)
            if right < left:
                backtrack(s + ')', left, right + 1, result)
        
        result = []
        backtrack('', 0, 0, result)
        return result
